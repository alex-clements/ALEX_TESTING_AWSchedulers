// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Building {
    id String @id @default(cuid())

    airportCode String @db.VarChar(3)
    number      Int

    longitude Float  @default(0)
    latitude  Float  @default(0)
    location  String

    maxFloor Int @db.TinyInt

    isActive Boolean @default(true)

    rooms Room[]
    users User[]
}

model Room {
    id String @id @default(cuid())

    floorNumber Int

    roomNumber String
    roomName   String?
    capacity   Int

    isActive Boolean @default(true)

    AV Boolean @default(false)
    VC Boolean @default(false)

    Building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
    buildingId String

    BookingRecords BookingRecord[]

    @@unique([floorNumber, roomNumber, buildingId])
}

model User {
    id       String  @id @default(cuid())
    username String  @unique
    name     String
    email    String?
    isAdmin  Boolean @default(false)
    isActive Boolean @default(true)

    Building    Building? @relation(fields: [buildingId], references: [id])
    buildingId  String?
    floorNumber Int

    BookingRecords    BookingRecord[]
    OrganizedBookings Booking[]
}

model Booking {
    id   String @id @default(cuid())
    name String

    startTime   DateTime? @db.Timestamp()
    endTime     DateTime? @db.Timestamp()
    organizer   User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
    organizerId String

    BookingRecords BookingRecord[]
}

model BookingRecord {
    User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    Room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
    Booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

    userId    String
    roomId    String
    bookingId String

    @@id([userId, bookingId])
}
